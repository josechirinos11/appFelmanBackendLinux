/**
 * Ejemplos de prueba para el generador SQL con instrucciones de Felman
 * Ejecutar este archivo para probar las diferentes consultas
 */

const axios = require('axios');

// Configuraci√≥n del servidor
const BASE_URL = 'http://localhost:3000';
const OPENAI_ENDPOINT = `${BASE_URL}/openai/generate-sql-mock`;

// Ejemplos de consultas para probar
const ejemplosConsultas = [
  {
    descripcion: "Listar todos los clientes",
    textoUsuario: "Dame todos los clientes"
  },
  {
    descripcion: "Contar clientes",
    textoUsuario: "¬øCu√°ntos clientes tenemos?"
  },
  {
    descripcion: "Presupuestos aprobados",
    textoUsuario: "Mu√©strame los presupuestos aprobados"
  },
  {
    descripcion: "Presupuestos entregados",
    textoUsuario: "¬øQu√© presupuestos est√°n entregados?"
  },
  {
    descripcion: "Total de precios",
    textoUsuario: "¬øCu√°l es el total de todos los precios?"
  },
  {
    descripcion: "L√≠neas con presupuesto",
    textoUsuario: "Mu√©strame las l√≠neas con presupuesto"
  },
  {
    descripcion: "N√∫meros de fabricaci√≥n por serie",
    textoUsuario: "Dame los n√∫meros de fabricaci√≥n por serie"
  },
  {
    descripcion: "Presupuestos de hoy",
    textoUsuario: "¬øQu√© presupuestos se crearon hoy?"
  },
  {
    descripcion: "√öltimos presupuestos",
    textoUsuario: "Mu√©strame los √∫ltimos presupuestos"
  },
  {
    descripcion: "Clientes con presupuestos",
    textoUsuario: "Dame los clientes con presupuestos"
  },
  {
    descripcion: "Presupuestos facturados",
    textoUsuario: "¬øCu√°les est√°n facturados?"
  },
  {
    descripcion: "Presupuestos m√°s caros",
    textoUsuario: "Mu√©strame los presupuestos m√°s caros"
  },
  {
    descripcion: "Estados de proceso",
    textoUsuario: "Dame el resumen de estados"
  },
  {
    descripcion: "L√≠neas pendientes de fabricar",
    textoUsuario: "¬øQu√© l√≠neas est√°n pendientes fabricar?"
  },
  {
    descripcion: "Presupuestos de este mes",
    textoUsuario: "Presupuestos de este mes"
  }
];

// Funci√≥n para probar una consulta
async function probarConsulta(ejemplo) {
  try {
    console.log(`\nüîç ${ejemplo.descripcion}`);
    console.log(`üìù Consulta: "${ejemplo.textoUsuario}"`);
    
    const response = await axios.post(OPENAI_ENDPOINT, {
      textoUsuario: ejemplo.textoUsuario
    });
    
    if (response.data.success) {
      console.log(`‚úÖ SQL generado:`);
      console.log(`   ${response.data.consulta}`);
      console.log(`üìã Contexto: ${response.data.contexto}`);
    } else {
      console.log(`‚ùå Error: ${response.data.message}`);
    }
  } catch (error) {
    console.log(`‚ùå Error de conexi√≥n: ${error.message}`);
  }
}

// Funci√≥n principal para ejecutar todos los ejemplos
async function ejecutarPruebas() {
  console.log('üöÄ Iniciando pruebas del generador SQL de Felman');
  console.log('=' .repeat(60));
  
  for (const ejemplo of ejemplosConsultas) {
    await probarConsulta(ejemplo);
    // Peque√±a pausa entre consultas
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\n' + '=' .repeat(60));
  console.log('‚ú® Pruebas completadas');
}

// Funci√≥n para probar una consulta personalizada
async function consultaPersonalizada(texto) {
  console.log('\nüîß Consulta personalizada');
  await probarConsulta({
    descripcion: "Consulta personalizada",
    textoUsuario: texto
  });
}

// Verificar si se ejecuta directamente o se importa
if (require.main === module) {
  // Ejecutar todas las pruebas
  ejecutarPruebas().catch(console.error);
  
  // Ejemplo de consulta personalizada (descomentar para usar)
  // setTimeout(() => {
  //   consultaPersonalizada("Dame el presupuesto m√°s alto del cliente X");
  // }, 6000);
}

module.exports = {
  probarConsulta,
  consultaPersonalizada,
  ejecutarPruebas,
  ejemplosConsultas
};
